
                          RV-Monitor README

==1. Overview==

RV-Monitor is a commercial product derived from earlier work on
Monitoring-Oriented Programming, abbreviated MOP.  It is a software development
and analysis framework aiming at reducing the gap between formal specification
and implementation by allowing them together to form a system. In MOP, and by
extension RV-Monitor, runtime monitoring is supported and encouraged as a
fundamental principle for building reliable software: monitors are
automatically synthesized from specified properties and integrated into the
original system to check its dynamic behaviors during execution. When a
specification is violated or validated at runtime, user-defined actions will be
triggered, which can be any code from information logging to runtime recovery.
One can understand RV-Monitor from at least three perspectives: as a discipline
allowing one to improve safety, reliability and dependability of a system by
monitoring its requirements against its implementation at runtime; as an
extension of programming languages with logics (one can add logical statements
anywhere in the program, referring to past or future states); and as a
lightweight formal method. 

==2. Usage==

*** To call rv-monitor with ease, please add rv-monitor/bin to your PATH!

=2.1 Linux and Mac (POSIX)

The 'rv-monitor' script has the following usage:

Usage) rv-monitor [-v] [-d <target directory>] <specification file or dir>

    -v option is verbose mode 
    -d option is used to specify the target directory
        where the resulting java code will be saved. It is optional.
    
Specification files must have the .rvm file extension.

Example from examples/CFG/HasNext)
    
    rv-monitor rvm/HasNext.rvm
    
For more options, type 'rv-monitor' or 'rv-monitor -h'

=2.2 Windows

The script, 'rv-monitor.bat' has the following usage:

Usage) rv-monitor.bat [-v] [-d <target directory>] <specification file or dir>

Example) 

    rv-monitor.bat rvm\HasNext.rvm

For more options, type 'rv-monitor.bat' or 'rv-monitor.bat -h'


=3.1 Executing a Monitored Program

When you execute a monitored program, you need to include the RV-Monitor Runtime 
Library, as well as your current directory, in your class path. The RV-Monitor 
Runtime Library is provided in this package in the rv-monitor/lib directory. 
A typical value of this is:

In Windows,
  rv-monitor\lib\rvmonitorrt.jar

In Linux and Mac,
  rv-monitor/lib/rvmonitorrt.jar

Add this to the left end of the "CLASSPATH" followed by ";." (in Windows) or ":."
(in Linux and Mac).
