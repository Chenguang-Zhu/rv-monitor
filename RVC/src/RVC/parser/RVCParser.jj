options {
 STATIC = false;
}

PARSER_BEGIN(RVCParser)
package RVCParser.parser;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.io.*;

public class RVCParser {
  public static RVCParser parse(String input) {
    Reader reader = new StringReader(input);
	  RVCParser rvcParser = new RVCParser(reader);	
	 
	  rvcParser.events = new HashMap<String, String>();
	  rvcParser.handlers = new HashMap<String, String>();

    try{
      rvcParser.Start();
    }
	 catch(ParseException e){
      System.err.println(e.getMessage());
	 }
	 catch(TokenMgrError e){
      System.err.println(e.getMessage());
	 }
	 return rvcParser;
  }

  private String specName;
  //Domain is event name, range is body
  private HashMap<String, String> events;
  //Domain is category, range is body
  private HashMap<String, String> handlers;
  private String formalism;
  private String formula;
  
  public HashMap<String, String> getEvents (){
	  return events;
  }
  
  public HashMap<String, String> getHandlers () {
	  return handlers;
  }

  public String getFormalism () {
	  return formalism;
  }

  public String getFormula () {
	  return formula;
  }

  //stolen from rv-monitor parser.  This is rather
  //ugly and should be refactored
  private String parseFormula () throws ParseException {
	StringBuffer buf = new StringBuffer();
    	buf.append(jj_nt);
    	
    	StringBuffer last_id = new StringBuffer();
    	try {
   			char next = jj_input_stream.readChar();
    		while (true){
    			if (next == '@'){
    				if (last_id.length() != 0){
    					buf.append(last_id);
    				}
 			    	jj_input_stream.backup(1);
			    	jj_nt = token_source.getNextToken();
			    	break;
    			}
    			if (next == '}'){
    				int residueSize = 0;
    				boolean EOFSeen = false;
    				boolean endFormula = true;
    				while(!EOFSeen && endFormula){
    					try{
	    					jj_input_stream.readChar();
	    					jj_input_stream.backup(1);
	    				} catch (java.io.IOException e1){
	    					EOFSeen = true;
	    				}
	    				if(!EOFSeen){
	    					char tempNext = jj_input_stream.readChar();
	    					residueSize++;
	    					if(tempNext != ' ' &&
	    						tempNext != '\n' &&
	    						tempNext != '\r' &&
	    						tempNext != '\t' &&
	    						tempNext != '\f'){
	    						endFormula = false;
	    						break;
	    					}
	    				}
    				}
    				jj_input_stream.backup(residueSize);
    				if(endFormula){
	    				if (last_id.length() != 0){
	    					buf.append(last_id);
	    				}
	 			    	jj_input_stream.backup(1);
				    	jj_nt = token_source.getNextToken();
				    	break;
				    } else {
				    	//it will go to else part below.
				    }
    			}
    			if (next == ':'){
    				jj_input_stream.backup(last_id.length());
    				jj_nt = token_source.getNextToken();
    				break;
    			}
    			
    			if ( (next >= '0' && next <= '9') || (next >= 'a' && next <= 'z') || (next >= 'A' && next <= 'Z')){
    				last_id.append(next);
    			} else {
    				if (last_id.length() != 0){
    					buf.append(last_id);
    					last_id = new StringBuffer();
    				}
		    		buf.append(next);			
    			}
    			 
    			next = jj_input_stream.readChar();
    		}
    	} catch (Exception e) {
    		if(e instanceof ParseException)
				throw (ParseException)e;
    		Token t = new Token();
    		t.beginLine = jj_input_stream.getBeginLine();
    		t.beginColumn = jj_input_stream.getBeginColumn();    		
    		throw new ParseException("wrong formula");
    	}
    	return buf.toString().trim();    	
    }

  private String parseCodeBlock () throws ParseException {
    return "";
  }
}
PARSER_END(RVCParser)

SKIP : {
 	<WHITESPACE: [" ","\t","\r","\n"]>
}
TOKEN : {
    <LBRACE : "{">
	| <RBRACE : "}">
	| <AT : "@">
	| <EVENT : "event">
	| <ID : (<LETTER>|"_")(<LETTER>|<DIGIT>|"_")*> 
	| <DIGIT : ["0"-"9"]>
	| <LETTER : ["a"-"z","A"-"Z"]>
}

void Start() : {
  Token formalismToken;
  Token specNameToken;
}
{ 
  specNameToken = <ID> {specName = specNameToken.image;}
  "{"
    (Event())+
    formalismToken = <ID>
    {formalism = formalismToken.image; }
        ":" 
    { formula = parseFormula(); }
    (Handler())+ 
  "}"
  <EOF>
}

void Event() : {
  Token token;
  String code;
} 
{
  "event"
  token = <ID> "{"
    { code = parseCodeBlock(); }
  "}"
  { events.put(token.image,code); }
}

void Handler() : {
  Token token;
  String code;
} 
{
  "@"
  token = <ID> "{"
    { code = parseCodeBlock(); }  
  "}"
  { events.put(token.image,code); }
}
