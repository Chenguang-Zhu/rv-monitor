/* Generated By:JavaCC: Do not edit this line. RVCParser.java */
package com.runtimeverification.rvmonitor.c.rvc.parser;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;
import java.io.*;

public class RVCParser implements RVCParserConstants {

  public static void main(String[] args){
     Scanner sc = new Scanner(System.in);
     StringBuilder buf = new StringBuilder();
     while(sc.hasNextLine()) buf.append(sc.nextLine());
     RVCParser rvcParser = parse(buf.toString());
     System.out.println(rvcParser.specName + "\u005cn==========");
     System.out.println(rvcParser.declarations + "\u005cn==========");
     System.out.println(rvcParser.events + "\u005cn==========" );
     System.out.println(rvcParser.parameters + "\u005cn==========" );
     System.out.println(rvcParser.formalism  + "\u005cn==========");
     System.out.println(rvcParser.formula  + "\u005cn==========");
     System.out.println(rvcParser.handlers  + "\u005cn==========");
  }

  public static RVCParser parse(String input) {
    Reader reader = new StringReader(input);
          RVCParser rvcParser = new RVCParser(reader);

          rvcParser.events = new HashMap<String, String>();
    rvcParser.parameters = new HashMap<String, String>();
          rvcParser.handlers = new HashMap<String, String>();

    try{
      rvcParser.Start();
    }
         catch(ParseException e){
      System.err.println(e.getMessage());
         }
         catch(TokenMgrError e){
      System.err.println(e.getMessage());
         }
         return rvcParser;
  }

  private String includes = "";
  private String specName;
  //Domain is event name, range is body
  private HashMap<String, String> events;
  //Domain is event name, range is parameter list
  private HashMap<String, String> parameters;
  //Domain is category, range is body
  private HashMap<String, String> handlers;
  private String formalism;
  private String formula;
  private String declarations;

  public String getIncludes(){
    return includes;
  }

  public String getSpecName(){
    return specName;
  }

  public HashMap<String, String> getEvents (){
          return events;
  }

  public HashMap<String, String> getParameters () {
          return parameters;
  }

  public HashMap<String, String> getHandlers () {
          return handlers;
  }

  public String getDeclarations() {
    return declarations;
  }

  public String getFormalism () {
          return formalism;
  }

  public String getFormula () {
          return formula;
  }

  private String parseFormula () throws ParseException {

    StringBuilder buf = new StringBuilder();

    try {
                        char next = jj_input_stream.readChar();
        while (true){
          if(next == '@'){
            jj_input_stream.backup(1);
            break;
          }
          buf.append(next);
          next = jj_input_stream.readChar();
        }
    } catch (Exception e) {
                if(e instanceof ParseException)
                                throw (ParseException)e;
                throw new ParseException("bad formula");
    }
    return buf.toString().trim();
  }

  private String parseCodeBlock () throws ParseException {
    StringBuilder buf = new StringBuilder();

    try {
                        char next = jj_input_stream.readChar();
                int nesting = 0;
        while (true){
          if(next == '{'){
            ++nesting;
            buf.append(next);
          }
          else if(next == '}'){
            --nesting;
            if(nesting != -1){
              buf.append(next);
            }
            else {
              jj_input_stream.backup(1);
              break;
            }
          }
          else {
            buf.append(next);
          }
          next = jj_input_stream.readChar();
        }
    } catch (Exception e) {
                if(e instanceof ParseException){
                                   throw (ParseException)e;
        }
                throw new ParseException("bad code block");
    }
    return buf.toString().trim();
  }

  //this is a very ugly hack
  private String parseDeclarations () throws ParseException {
    StringBuilder buf = new StringBuilder();
    StringBuilder eventBuilder = new StringBuilder();

    //if reading = 0 we haven't seen 'e'.  If it is 4 we grab the next
    //4 characters to see if we've made the word "event" 
    try {
        int reading = 0;
                        char next = jj_input_stream.readChar();

        while (true){
          if(reading == 0){
            if(eventBuilder.length() == 5){
              if(eventBuilder.toString().equals("event")){
                jj_input_stream.backup(6);
                break;
              }
              else {
                buf.append(eventBuilder);
                eventBuilder = new StringBuilder();
              }
            }
            if(next == 'e'){
              reading = 4;
              eventBuilder.append('e');
            }
            else {
              buf.append(next);
            }
          }
          else { //reading != 0 
            --reading;
            eventBuilder.append(next);
          }
          next = jj_input_stream.readChar();
        }

            //next = jj_input_stream.readChar();
    } catch (Exception e) {
                if(e instanceof ParseException)
                                throw (ParseException)e;
                throw new ParseException("bad declarations");
    }
    return buf.toString().trim();
  }

  final public void Start() throws ParseException {
  Token formalismToken;
  Token specNameToken;
  Token includeToken;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(INCLUDE);
      jj_consume_token(LT);
      includeToken = jj_consume_token(ID);
      jj_consume_token(GT);
                                           includes += "#include <" + includeToken.image + ">\u005cn";
    }
    specNameToken = jj_consume_token(ID);
                        specName = specNameToken.image;
    jj_consume_token(LBRACE);
      declarations = parseDeclarations();
    label_2:
    while (true) {
      Event();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVENT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    formalismToken = jj_consume_token(ID);
     formalism = formalismToken.image;
    jj_consume_token(15);
      formula = parseFormula();
    label_3:
    while (true) {
      Handler();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(RBRACE);
    jj_consume_token(0);
  }

  final public void Event() throws ParseException {
  Token token;
  String paras;
  String code;
    jj_consume_token(EVENT);
    token = jj_consume_token(ID);
    paras = Parameters();
                                      parameters.put(token.image,paras);
    jj_consume_token(LBRACE);
      code = parseCodeBlock();
    jj_consume_token(RBRACE);
    events.put(token.image,code);
  }

  final public String Parameters() throws ParseException {
  Token token;
  StringBuilder buf = new StringBuilder("(");
  String p;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      p = Parameter();
                      buf.append(p);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        p = Parameter();
                                                             buf.append(", " + p);
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    buf.append(")"); {if (true) return buf.toString().trim();}
    throw new Error("Missing return statement in function");
  }

  final public String Parameter() throws ParseException {
  Token token;
  StringBuilder buf = new StringBuilder();
    label_5:
    while (true) {
      token = jj_consume_token(ID);
                 buf.append(token.image + " ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
    }
   {if (true) return buf.toString().trim();}
    throw new Error("Missing return statement in function");
  }

  final public void Handler() throws ParseException {
  Token token;
  String code;
    jj_consume_token(AT);
    token = jj_consume_token(ID);
    jj_consume_token(LBRACE);
      code = parseCodeBlock();
    jj_consume_token(RBRACE);
    handlers.put(token.image,code);
  }

  /** Generated Token Manager. */
  public RVCParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x800,0x80,0x40,0x1000,0x1000,};
   }

  /** Constructor with InputStream. */
  public RVCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RVCParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RVCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RVCParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RVCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RVCParser(RVCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RVCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
