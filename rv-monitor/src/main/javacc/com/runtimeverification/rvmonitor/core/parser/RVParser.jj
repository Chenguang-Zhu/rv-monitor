options {
 STATIC = false;
}

PARSER_BEGIN(RVParser)
package com.runtimeverification.rvmonitor.core.parser;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.*;

import com.runtimeverification.rvmonitor.core.ast.Event;
import com.runtimeverification.rvmonitor.core.ast.MonitorFile;
import com.runtimeverification.rvmonitor.core.ast.Property;
import com.runtimeverification.rvmonitor.core.ast.PropertyHandler;
import com.runtimeverification.rvmonitor.core.ast.Specification;

public class RVParser {
    
    public static MonitorFile parse(final String s) {
        return parse(new BufferedReader(new StringReader(s)));
    }
    
    public static MonitorFile parse(final Reader reader) {
        RVParser parser = new RVParser(reader);
        try {
            return parser.rvmFile();
        } catch(ParseException e) {
            throw new RuntimeException(e);
        } catch(TokenMgrError e) {
            throw new RuntimeException(e);
        }
    }
    
    private String parseBacktickSegment() throws ParseException {
        try {
            int backtickDepth = 1;
            char c;
            while((c =jj_input_stream.readChar()) == '`') {
                backtickDepth++;
            }
            StringBuilder innerSegment = new StringBuilder();
            innerSegment.append(c);
            while(true) {
                while((c = jj_input_stream.readChar()) != '`') {
                    innerSegment.append(c);
                }
                int endingTicks;
                for(endingTicks = 1; endingTicks < backtickDepth; endingTicks++) {
                    c = jj_input_stream.readChar();
                    if(c != '`') {
                        for(int i = 0; i < endingTicks; i++) {
                            innerSegment.append('`');
                        }
                        innerSegment.append(c);
                        break;
                    }
                }
                if(endingTicks == backtickDepth) {
                    return innerSegment.toString();
                }
            }
        } catch(IOException ioe) {
            ioe.printStackTrace();
            return "";
        }
    }
    
    private String parseMatchingSegment(final char open, final char close, int depth)
            throws ParseException {
        try {
            StringBuilder innerSegment = new StringBuilder();
            for(int i = 0; i < depth; i++) {
                innerSegment.append(open);
            }
            while(depth > 0) {
                char c = jj_input_stream.readChar();
                innerSegment.append(c);
                if(c == open) {
                    depth++;
                } else if(c == close) {
                    depth--;
                }
            }
            return innerSegment.toString();
        } catch(IOException ioe) {
            ioe.printStackTrace();
            return "";
        }
    }
    
    private String parseMatchingParens() throws ParseException {
        return parseMatchingSegment('(', ')', 1);
    }
    
    private String parseMatchingCurlyBrackets() throws ParseException {
        return parseMatchingSegment('{', '}', 1);
    }
    
    private String parseUntil(final String end) throws ParseException {
        try {
            StringBuilder innerSegment = new StringBuilder();
            while(true) {
                char c;
                while((c = jj_input_stream.readChar()) != end.charAt(0)) {
                    innerSegment.append(c);
                }
                StringBuilder partialMatch = new StringBuilder();
                partialMatch.append(c);
                for(int i = 1; i < end.length(); i++) {
                    c = jj_input_stream.readChar();
                    if(c == end.charAt(i)) {
                        partialMatch.append(c);
                    } else {
                        break;
                    }
                }
                if(partialMatch.toString().equals(end)) {
                    jj_input_stream.backup(end.length());
                    return innerSegment.toString();
                } else {
                    innerSegment.append(partialMatch);
                }
            }
        } catch(IOException ioe) {
            ioe.printStackTrace();
            return "";
        }
    }
    
    private String parseUntilLineMatches(final Pattern pattern) {
        try {
            StringBuilder allText = new StringBuilder();
            StringBuilder line = new StringBuilder();
            while(!pattern.matcher(line.toString()).find()) {
                allText.append(line);
                line = new StringBuilder();
                char c;
                while((c = jj_input_stream.readChar()) != '\n') {
                    line.append(c);
                }
                line.append(c);
            }
            jj_input_stream.backup(line.length());
            return allText.toString();
        } catch(IOException ioe) {
            ioe.printStackTrace();
            return "";
        }
    }
    
    public static void main(final String[] args) {
        try {
            parse(new InputStreamReader(new FileInputStream(args[0])));
            System.out.println("Success : " + args[0]);
        } catch(Exception e) {
            System.out.println("Failure : " + args[0]);
            e.printStackTrace();
        }
    }
}
PARSER_END(RVParser)

SKIP : {
    <WHITESPACE: [" ","\t","\r","\n"]>
    | <LINECOMMENT: "//" (~["\n"])* "\n">
    | <BLOCKCOMMENT: "/*"(~["*"])* "*"(~["/"] (~["*"])* "*")* "/" >
}

TOKEN : {
    <LBRACE : "{">
    | <RBRACE : "}">
    | <LPAREN : "(">
    | <RPAREN : ")">
    | <COLON : ":">
    | <AT : "@">
    | <EVENT : ("event")>
    | <ID : (<LETTER>|"_")(<LETTER>|<DIGIT>|"_"|"."|"-")*>
    | <DIGIT : ["0"-"9"]>
    | <LETTER : ["a"-"z","A"-"Z"]>
    | <BACKTICK : "`">
}

MonitorFile rvmFile() : {
    String preamble;
    ArrayList<Specification> specs = new ArrayList<Specification>();
    Specification spec;
}
{
    {preamble = parseUntilLineMatches(Pattern.compile("^([0-9_a-zA-Z\\s-]+)((\\()|(\\{))"));}
    (spec = specification() { specs.add(spec); })+
    {
        return new MonitorFile(preamble, specs);
    }
}

Specification specification() : {
    String preDeclarations = "";
    ArrayList<String> languageModifiers = new ArrayList<String>();
    Token modifier;
    String languageParameters = "";
    String languageDeclarations = "";
    ArrayList<Event> events = new ArrayList<Event>();
    Event myEvent;
    ArrayList<Property> properties = new ArrayList<Property>();
    Property myProperty;
}
{
    (modifier = <ID> {languageModifiers.add(modifier.image);})+
    (languageParameters = delimitedNoCurly())?
    "{"
        {languageDeclarations = parseUntilLineMatches(Pattern.compile(
            "^([-a-zA-Z\\s_]*)event([a-zA-Z_\\s0-9]+)\\("));}
        (LOOKAHEAD( 2 ) myEvent = event() { events.add(myEvent); })+
        (myProperty = propertyAndHandlers() {properties.add(myProperty);})*
    "}"
    {
        String name = languageModifiers.get(languageModifiers.size() - 1);
        languageModifiers.remove(languageModifiers.size() - 1);
        return new Specification(preDeclarations, languageModifiers, name, languageParameters,
            languageDeclarations, events, properties);
    }
}

Event event() : {
    ArrayList<String> modifiers = new ArrayList<String>();
    Token modifier;
    Token name;
    String eventDefinition = "";
    String eventAction = "";
}
{
    (modifier = <ID> { modifiers.add(modifier.image); })*
    <EVENT>
    (name = <ID>)
    (eventDefinition = delimitedSegment())
    ((eventAction = delimitedSegment()) | ";")
    {return new Event(modifiers, name.image, eventDefinition, eventAction);}
}

Property propertyAndHandlers() : {
    Token name;
    Token notAt;
    String syntax = "";
    ArrayList<PropertyHandler> propertyHandlers = new ArrayList<PropertyHandler>();
    PropertyHandler handler;
}
{
    (name = <ID>)
    ":"
    {syntax = parseUntil("@");}
    (handler = propertyHandler() {propertyHandlers.add(handler);})+
    {return new Property(name.image, syntax, propertyHandlers);}
}

PropertyHandler propertyHandler() : {
    Token name;
    String languageAction = "";
}
{
    "@"
    (name = <ID>)
    (languageAction = delimitedSegment())
    {return new PropertyHandler(name.image, languageAction);}
}

String delimitedSegment() : {
    String other;
}
{
    (other = delimitedNoCurly() { return other; }) |
    ("{" { return parseMatchingCurlyBrackets(); })
}

String delimitedNoCurly() : {

}
{
    ("`" { return parseBacktickSegment(); }) |
    ("(" { return parseMatchingParens(); })
}
